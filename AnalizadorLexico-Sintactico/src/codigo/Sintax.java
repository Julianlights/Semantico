
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 13 09:11:38 CST 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 13 09:11:38 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\002\014\000\002\014" +
    "\006\000\002\014\006\000\002\014\005\000\002\012\012" +
    "\000\002\012\012\000\002\012\012\000\002\012\012\000" +
    "\002\012\011\000\002\012\011\000\002\012\002\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\010\012\000\002\010\012" +
    "\000\002\010\012\000\002\010\012\000\002\010\011\000" +
    "\002\010\011\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\002\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\002\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\004\007\000\002\004\007" +
    "\000\002\015\004\000\002\003\006\000\002\003\006\000" +
    "\002\003\003\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\004\005\004\001\002\000\004\007\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\024\010\001\002\000\004\022\011\001\002\000" +
    "\020\005\014\006\020\011\016\012\023\013\012\014\015" +
    "\015\022\001\002\000\004\024\ufff3\001\002\000\020\005" +
    "\035\006\036\011\016\012\023\013\012\014\015\015\022" +
    "\001\002\000\014\011\016\012\023\013\012\014\015\015" +
    "\022\001\002\000\004\024\ufff2\001\002\000\004\024\ufff5" +
    "\001\002\000\020\005\uffd1\006\uffd1\011\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\015\uffd1\001\002\000\014\011\016\012\023" +
    "\013\012\014\015\015\022\001\002\000\004\024\024\001" +
    "\002\000\004\024\ufff1\001\002\000\004\024\ufff4\001\002" +
    "\000\004\025\025\001\002\000\020\005\uffd0\006\uffd0\011" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\001\002\000\004" +
    "\024\027\001\002\000\004\025\030\001\002\000\020\005" +
    "\uffd2\006\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\001\002\000\004\024\032\001\002\000\004\025\033\001" +
    "\002\000\020\005\uffd3\006\uffd3\011\uffd3\012\uffd3\013\uffd3" +
    "\014\uffd3\015\uffd3\001\002\000\020\005\uffd4\006\uffd4\011" +
    "\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\001\002\000\016" +
    "\011\016\012\023\013\012\014\015\015\022\024\274\001" +
    "\002\000\016\011\016\012\023\013\012\014\015\015\022" +
    "\024\177\001\002\000\004\024\175\001\002\000\004\022" +
    "\041\001\002\000\004\023\042\001\002\000\022\005\043" +
    "\006\046\010\045\011\016\012\023\013\012\014\015\015" +
    "\022\001\002\000\016\010\160\011\016\012\023\013\012" +
    "\014\015\015\022\001\002\000\004\023\156\001\002\000" +
    "\004\024\150\001\002\000\016\010\133\011\016\012\023" +
    "\013\012\014\015\015\022\001\002\000\004\024\050\001" +
    "\002\000\004\020\051\001\002\000\004\021\052\001\002" +
    "\000\004\022\053\001\002\000\004\023\054\001\002\000" +
    "\024\005\055\006\060\010\056\011\016\012\023\013\012" +
    "\014\015\015\022\023\ufff6\001\002\000\016\010\115\011" +
    "\016\012\023\013\012\014\015\015\022\001\002\000\004" +
    "\024\106\001\002\000\004\023\uffeb\001\002\000\016\010" +
    "\071\011\016\012\023\013\012\014\015\015\022\001\002" +
    "\000\004\024\062\001\002\000\004\020\063\001\002\000" +
    "\004\021\064\001\002\000\004\022\065\001\002\000\004" +
    "\023\066\001\002\000\024\005\055\006\060\010\056\011" +
    "\016\012\023\013\012\014\015\015\022\023\ufff6\001\002" +
    "\000\004\023\ufff7\001\002\000\004\024\100\001\002\000" +
    "\004\024\072\001\002\000\004\020\073\001\002\000\004" +
    "\021\074\001\002\000\004\022\075\001\002\000\004\023" +
    "\076\001\002\000\024\005\055\006\060\010\056\011\016" +
    "\012\023\013\012\014\015\015\022\023\ufff6\001\002\000" +
    "\004\023\ufff9\001\002\000\004\020\101\001\002\000\004" +
    "\021\102\001\002\000\004\022\103\001\002\000\004\023" +
    "\104\001\002\000\024\005\055\006\060\010\056\011\016" +
    "\012\023\013\012\014\015\015\022\023\ufff6\001\002\000" +
    "\004\023\ufffa\001\002\000\004\020\107\001\002\000\004" +
    "\021\110\001\002\000\004\022\111\001\002\000\004\023" +
    "\112\001\002\000\024\005\055\006\060\010\056\011\016" +
    "\012\023\013\012\014\015\015\022\023\ufff6\001\002\000" +
    "\004\023\ufff8\001\002\000\004\024\124\001\002\000\004" +
    "\024\116\001\002\000\004\020\117\001\002\000\004\021" +
    "\120\001\002\000\004\022\121\001\002\000\004\023\122" +
    "\001\002\000\024\005\055\006\060\010\056\011\016\012" +
    "\023\013\012\014\015\015\022\023\ufff6\001\002\000\004" +
    "\023\ufffb\001\002\000\004\020\125\001\002\000\004\021" +
    "\126\001\002\000\004\022\127\001\002\000\004\023\130" +
    "\001\002\000\024\005\055\006\060\010\056\011\016\012" +
    "\023\013\012\014\015\015\022\023\ufff6\001\002\000\004" +
    "\023\ufffc\001\002\000\004\024\142\001\002\000\004\024" +
    "\134\001\002\000\004\020\135\001\002\000\004\021\136" +
    "\001\002\000\004\022\137\001\002\000\004\023\140\001" +
    "\002\000\024\005\055\006\060\010\056\011\016\012\023" +
    "\013\012\014\015\015\022\023\ufff6\001\002\000\004\023" +
    "\uffed\001\002\000\004\020\143\001\002\000\004\021\144" +
    "\001\002\000\004\022\145\001\002\000\004\023\146\001" +
    "\002\000\024\005\055\006\060\010\056\011\016\012\023" +
    "\013\012\014\015\015\022\023\ufff6\001\002\000\004\023" +
    "\uffee\001\002\000\004\020\151\001\002\000\004\021\152" +
    "\001\002\000\004\022\153\001\002\000\004\023\154\001" +
    "\002\000\024\005\055\006\060\010\056\011\016\012\023" +
    "\013\012\014\015\015\022\023\ufff6\001\002\000\004\023" +
    "\uffec\001\002\000\004\002\000\001\002\000\004\024\167" +
    "\001\002\000\004\024\161\001\002\000\004\020\162\001" +
    "\002\000\004\021\163\001\002\000\004\022\164\001\002" +
    "\000\004\023\165\001\002\000\024\005\055\006\060\010" +
    "\056\011\016\012\023\013\012\014\015\015\022\023\ufff6" +
    "\001\002\000\004\023\uffef\001\002\000\004\020\170\001" +
    "\002\000\004\021\171\001\002\000\004\022\172\001\002" +
    "\000\004\023\173\001\002\000\024\005\055\006\060\010" +
    "\056\011\016\012\023\013\012\014\015\015\022\023\ufff6" +
    "\001\002\000\004\023\ufff0\001\002\000\004\025\176\001" +
    "\002\000\020\005\ufffd\006\ufffd\011\ufffd\012\ufffd\013\ufffd" +
    "\014\ufffd\015\ufffd\001\002\000\004\020\203\001\002\000" +
    "\004\024\201\001\002\000\004\025\202\001\002\000\020" +
    "\005\ufffe\006\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015" +
    "\ufffe\001\002\000\016\011\204\012\210\013\212\014\205" +
    "\015\211\024\207\001\002\000\004\024\272\001\002\000" +
    "\004\024\270\001\002\000\004\021\267\001\002\000\004" +
    "\024\265\001\002\000\004\024\263\001\002\000\004\024" +
    "\261\001\002\000\004\024\213\001\002\000\020\021\uffdd" +
    "\024\216\027\215\030\221\031\220\032\217\033\222\001" +
    "\002\000\004\021\uffda\001\002\000\004\024\257\001\002" +
    "\000\004\024\255\001\002\000\004\024\253\001\002\000" +
    "\004\024\251\001\002\000\004\024\247\001\002\000\004" +
    "\024\223\001\002\000\020\021\uffe4\024\225\027\224\030" +
    "\226\031\230\032\227\033\232\001\002\000\004\024\245" +
    "\001\002\000\004\024\243\001\002\000\004\024\241\001" +
    "\002\000\004\024\237\001\002\000\004\024\235\001\002" +
    "\000\004\021\uffdf\001\002\000\004\024\233\001\002\000" +
    "\020\021\uffe4\024\225\027\224\030\226\031\230\032\227" +
    "\033\232\001\002\000\004\021\uffe6\001\002\000\020\021" +
    "\uffe4\024\225\027\224\030\226\031\230\032\227\033\232" +
    "\001\002\000\004\021\uffe9\001\002\000\020\021\uffe4\024" +
    "\225\027\224\030\226\031\230\032\227\033\232\001\002" +
    "\000\004\021\uffe7\001\002\000\020\021\uffe4\024\225\027" +
    "\224\030\226\031\230\032\227\033\232\001\002\000\004" +
    "\021\uffea\001\002\000\020\021\uffe4\024\225\027\224\030" +
    "\226\031\230\032\227\033\232\001\002\000\004\021\uffe5" +
    "\001\002\000\020\021\uffe4\024\225\027\224\030\226\031" +
    "\230\032\227\033\232\001\002\000\004\021\uffe8\001\002" +
    "\000\020\021\uffe4\024\225\027\224\030\226\031\230\032" +
    "\227\033\232\001\002\000\004\021\uffe3\001\002\000\020" +
    "\021\uffe4\024\225\027\224\030\226\031\230\032\227\033" +
    "\232\001\002\000\004\021\uffe2\001\002\000\020\021\uffe4" +
    "\024\225\027\224\030\226\031\230\032\227\033\232\001" +
    "\002\000\004\021\uffe0\001\002\000\020\021\uffe4\024\225" +
    "\027\224\030\226\031\230\032\227\033\232\001\002\000" +
    "\004\021\uffde\001\002\000\020\021\uffe4\024\225\027\224" +
    "\030\226\031\230\032\227\033\232\001\002\000\004\021" +
    "\uffe1\001\002\000\020\021\uffdd\024\216\027\215\030\221" +
    "\031\220\032\217\033\222\001\002\000\004\021\uffd8\001" +
    "\002\000\020\021\uffdd\024\216\027\215\030\221\031\220" +
    "\032\217\033\222\001\002\000\004\021\uffdb\001\002\000" +
    "\020\021\uffdd\024\216\027\215\030\221\031\220\032\217" +
    "\033\222\001\002\000\004\021\uffd7\001\002\000\004\022" +
    "\uffd5\001\002\000\020\021\uffdd\024\216\027\215\030\221" +
    "\031\220\032\217\033\222\001\002\000\004\021\uffd9\001" +
    "\002\000\020\021\uffdd\024\216\027\215\030\221\031\220" +
    "\032\217\033\222\001\002\000\004\021\uffdc\001\002\000" +
    "\004\020\300\001\002\000\004\024\276\001\002\000\004" +
    "\025\277\001\002\000\020\005\uffff\006\uffff\011\uffff\012" +
    "\uffff\013\uffff\014\uffff\015\uffff\001\002\000\016\011\204" +
    "\012\210\013\212\014\205\015\211\024\207\001\002\000" +
    "\004\021\302\001\002\000\004\022\uffd6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\012\011\020\015\016\001\001\000" +
    "\002\001\001\000\010\004\037\011\036\014\033\001\001" +
    "\000\004\011\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\274\001\001" +
    "\000\004\011\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\043\011\046\001\001" +
    "\000\004\011\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\060\012\056\001\001\000\004\011\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\060\012\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\060\012\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\060" +
    "\012\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\060\012\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\060\012" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\060\012\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\060\012\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\060" +
    "\012\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\060\012\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\060\012\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\060\012\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\230\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\233" +
    "\001\001\000\002\001\001\000\004\007\235\001\001\000" +
    "\002\001\001\000\004\007\237\001\001\000\002\001\001" +
    "\000\004\007\241\001\001\000\002\001\001\000\004\007" +
    "\243\001\001\000\002\001\001\000\004\007\245\001\001" +
    "\000\002\001\001\000\004\007\247\001\001\000\002\001" +
    "\001\000\004\007\251\001\001\000\002\001\001\000\004" +
    "\007\253\001\001\000\002\001\001\000\004\007\255\001" +
    "\001\000\002\001\001\000\004\007\257\001\001\000\002" +
    "\001\001\000\004\006\261\001\001\000\002\001\001\000" +
    "\004\006\263\001\001\000\002\001\001\000\004\006\265" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\270\001\001\000\002\001\001\000\004\006\272\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\300\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DeclararVariable ::= TIPODATOFUNCION name P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclararVariable",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DeclararVariable ::= MASRESTODATA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclararVariable",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DeclararVariable ::= PRIVATE TIPODATOFUNCION name P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclararVariable",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DeclararVariable ::= PUBLIC TIPODATOFUNCION name P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclararVariable",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MASRESTODATA ::= DeclararVariable RESTODECLARAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MASRESTODATA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONSTRUCTOR ::= PRIVATE name Parentesis_a TIPODATOS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONSTRUCTOR ::= PUBLIC name Parentesis_a TIPODATOS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPODATOS ::= name name MASDATOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPODATOS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPODATOS ::= FLOAT name MASDATOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPODATOS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPODATOS ::= STRING name MASDATOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPODATOS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPODATOS ::= INT name MASDATOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPODATOS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPODATOS ::= CHAR name MASDATOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPODATOS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPODATOS ::= DOUBLE name MASDATOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPODATOS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MASDATOS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MASDATOS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MASDATOS ::= name name RESTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MASDATOS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MASDATOS ::= ComaFloat name RESTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MASDATOS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MASDATOS ::= ComaString name RESTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MASDATOS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MASDATOS ::= ComaInt name RESTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MASDATOS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MASDATOS ::= ComaChar name RESTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MASDATOS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MASDATOS ::= ComaDouble name RESTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MASDATOS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RESTO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESTO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RESTO ::= name name RESTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESTO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RESTO ::= ComaFloat name RESTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESTO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RESTO ::= ComaString name RESTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESTO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RESTO ::= ComaInt name RESTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESTO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // RESTO ::= ComaChar name RESTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESTO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RESTO ::= ComaDouble name RESTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESTO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNCIONES ::= TIPODATOFUNCION name Parentesis_a Parentesis_c Llave_a Llave_c RESTOFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNCIONES ::= VOID name Parentesis_a Parentesis_c Llave_a Llave_c RESTOFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNCIONES ::= PRIVATE VOID name Parentesis_a Parentesis_c Llave_a Llave_c RESTOFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCIONES ::= PRIVATE TIPODATOFUNCION name Parentesis_a Parentesis_c Llave_a Llave_c RESTOFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCIONES ::= PUBLIC VOID name Parentesis_a Parentesis_c Llave_a Llave_c RESTOFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCIONES ::= PUBLIC TIPODATOFUNCION name Parentesis_a Parentesis_c Llave_a Llave_c RESTOFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPODATOFUNCION ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPODATOFUNCION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPODATOFUNCION ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPODATOFUNCION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPODATOFUNCION ::= INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPODATOFUNCION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPODATOFUNCION ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPODATOFUNCION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPODATOFUNCION ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPODATOFUNCION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RESTOFUNCION ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESTOFUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // RESTOFUNCION ::= TIPODATOFUNCION name Parentesis_a Parentesis_c Llave_a Llave_c RESTOFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESTOFUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // RESTOFUNCION ::= VOID name Parentesis_a Parentesis_c Llave_a Llave_c RESTOFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESTOFUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // RESTOFUNCION ::= PRIVATE VOID name Parentesis_a Parentesis_c Llave_a Llave_c RESTOFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESTOFUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // RESTOFUNCION ::= PRIVATE TIPODATOFUNCION name Parentesis_a Parentesis_c Llave_a Llave_c RESTOFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESTOFUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // RESTOFUNCION ::= PUBLIC VOID name Parentesis_a Parentesis_c Llave_a Llave_c RESTOFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESTOFUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // RESTOFUNCION ::= PUBLIC TIPODATOFUNCION name Parentesis_a Parentesis_c Llave_a Llave_c RESTOFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESTOFUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // RESTODECLARAR ::= TIPODATOFUNCION name P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESTODECLARAR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // RESTODECLARAR ::= PRIVATE TIPODATOFUNCION name P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESTODECLARAR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // RESTODECLARAR ::= PUBLIC TIPODATOFUNCION name P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESTODECLARAR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PUBLIC CLASS name Llave_a DeclararVariable CONSTRUCTOR Llave_a Llave_c FUNCIONES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

